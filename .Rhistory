# Khai báo các thư viện
library(tidyverse)
library(readr)
# Đọc file csv
data <- read.csv(file = "D:/bodyPerformance.csv")
# Khai báo các thư viện
library(tidyverse)
library(readr)
# Đọc file csv
data <- read.csv(file = "D:/bodyPerformance.csv")
data <- data |> janitor::clean_names() # Chuyển tên các cột về chữ thường
glimpse(data)
library(dplyr)
# Tính toán thống kê tóm tắt
summary_table <- data %>%
reframe(
Bien = c("age", "height_cm", "weight_kg", "body_fat", "diastolic", "systolic", "grip_force", "sit_and_bend_forward_cm", "sit_ups_counts", "broad_jump_cm"),
n = n(),
Trung_binh = c(mean(age), mean(height_cm), mean(weight_kg), mean(body_fat), mean(diastolic), mean(systolic),
mean(grip_force), mean(sit_and_bend_forward_cm), mean(sit_ups_counts),   mean(broad_jump_cm)),
Trung_vi = c(median(age), median(height_cm), median(weight_kg), median(body_fat), median(diastolic), median(systolic),
median(grip_force), median(sit_and_bend_forward_cm), median(sit_ups_counts), median(broad_jump_cm)),
Min = c(min(age), min(height_cm), min(weight_kg), min(body_fat), min(diastolic), min(systolic),
min(grip_force), min(sit_and_bend_forward_cm), min(sit_ups_counts), min(broad_jump_cm)),
Max = c(max(age), max(height_cm), max(weight_kg), max(body_fat), max(diastolic), max(systolic),
max(grip_force), max(sit_and_bend_forward_cm), max(sit_ups_counts), max(broad_jump_cm)),
)
# Hiển thị bảng
library(knitr)
kable(summary_table, col.names = c("Biến", "Số lượng", "Trung bình", "Trung vị", "Min", "Max"), align = "c")
remove_outliers <- function(x) {
Q1 <- quantile(x, 0.25)
Q3 <- quantile(x, 0.75)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
x[x >= lower_bound & x <= upper_bound]
}
# Remove outliers within each class
data <- data %>%
group_by(class) %>%
filter(weight_kg >= quantile(weight_kg, 0.25) - 1.5 * IQR(weight_kg) &
weight_kg <= quantile(weight_kg, 0.75) + 1.5 * IQR(weight_kg) &
height_cm >= quantile(height_cm, 0.25) - 1.5 * IQR(height_cm) &
height_cm <= quantile(height_cm, 0.75) + 1.5 * IQR(height_cm) &
body_fat >= quantile(body_fat, 0.25) - 1.5 * IQR(body_fat) &
body_fat <= quantile(body_fat, 0.75) + 1.5 * IQR(body_fat) &
diastolic >= quantile(diastolic, 0.25) - 1.5 * IQR(diastolic) &
diastolic <= quantile(diastolic, 0.75) + 1.5 * IQR(diastolic) &
systolic >= quantile(systolic, 0.25) - 1.5 * IQR(systolic) &
systolic <= quantile(systolic, 0.75) +1.5*IQR(systolic) &
grip_force >= quantile(grip_force, 0.25) -1.5*IQR(grip_force) &
grip_force <= quantile(grip_force, 0.75) +1.5*IQR(grip_force) &
sit_and_bend_forward_cm >= quantile(sit_and_bend_forward_cm, 0.25) - 1.5*IQR(sit_and_bend_forward_cm) &
sit_and_bend_forward_cm <= quantile(sit_and_bend_forward_cm, 0.75) +1.5*IQR(sit_and_bend_forward_cm) &
sit_ups_counts >= quantile(sit_ups_counts, 0.25) -1.5*IQR(sit_ups_counts) &
sit_ups_counts <= quantile(sit_ups_counts, 0.75) +1.5*IQR(sit_ups_counts) &
broad_jump_cm >= quantile(broad_jump_cm, 0.25) -1.5*IQR(broad_jump_cm) &
broad_jump_cm <= quantile(broad_jump_cm, 0.75) +1.5*IQR(broad_jump_cm)
)
library(ggplot2)
# Danh sách các biến cần so sánh
variables <- c("age", "height_cm", "weight_kg", "body_fat", "diastolic", "systolic",
"grip_force", "sit_and_bend_forward_cm", "sit_ups_counts", "broad_jump_cm")
# Tạo boxplot cho từng biến
plots <- lapply(variables, function(var) {
ggplot(data, aes_string(x = "class", y = var, fill = "class")) +
geom_boxplot() +
labs(title = paste("Distribution of", var, "by Class"),
x = "Class", y = var) +
theme_minimal()
})
# Hiển thị các biểu đồ
for (plot in plots) {
print(plot)
}
custom_summary <- function(x) {
data.frame(
n = length(x),
mean = mean(x, na.rm = TRUE),
sd = sd(x, na.rm = TRUE),
median = median(x, na.rm = TRUE),
trimmed = mean(x, trim = 0.1, na.rm = TRUE),
mad = mad(x, na.rm = TRUE),
min = min(x, na.rm = TRUE),
max = max(x, na.rm = TRUE),
range = max(x, na.rm = TRUE) - min(x, na.rm = TRUE)
)
}
grouped <- split(data[, -c(2, 12)], data$class)
result <- lapply(grouped, function(group) {
sapply(group, custom_summary)
})
print(result)
data_hm <- data
# Chuyển đổi cột gender thành 0 và 1
data_hm$gender <- ifelse(data$gender == "M", 1, 0)
# Chuyển đổi cột class thành dạng số
data_hm$class <- as.numeric(factor(data$class, levels = c("D", "C", "B", "A")))
library(reshape2)
cor_matrix <- cor(data_hm %>% select_if(is.numeric)) # Chọn các biến số
ggplot(melt(cor_matrix), aes(Var1, Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), space = "Lab",
name = "Correlation") +
theme_minimal() +
labs(title = "Ma trận tương quan", x = "", y = "") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
# Tóm tắt thống kê theo giới tính
data %>% group_by(gender) %>%
summarise(across(c(age, height_cm, weight_kg, body_fat, diastolic, systolic, grip_force, sit_and_bend_forward_cm, sit_ups_counts, broad_jump_cm), mean, na.rm = TRUE))
# Tóm tắt thống kê theo từng nhóm tuổi
library(dplyr)
# Chia age thành 3 nhóm: 20-30, 31-45, 46-64
data <- data %>%
mutate(age_group = case_when(
age >= 20 & age <= 34 ~ "20-34",
age >= 35 & age <= 49 ~ "35-49",
age >= 50 & age <= 64 ~ "50-64",
TRUE ~ "Unknown"
))
data %>%
group_by(age_group) %>%
summarise(across(c(height_cm, weight_kg, body_fat, diastolic, systolic, grip_force,
sit_and_bend_forward_cm, sit_ups_counts, broad_jump_cm),
mean, na.rm = TRUE))
# Tóm tắt theo lớp hiệu suất
data %>% group_by(class) %>%
summarise(across(c(age, height_cm, weight_kg, body_fat, diastolic, systolic, grip_force, sit_and_bend_forward_cm, sit_ups_counts, broad_jump_cm), mean, na.rm = TRUE))
# Lấy danh sách các biến số học trong dữ liệu
numeric_vars <- names(data)[sapply(data, is.numeric)]
numeric_vars <- numeric_vars[numeric_vars != "class"]
numeric_vars <- numeric_vars[numeric_vars != "gender"]
# Thực hiện kiểm định ANOVA cho từng biến số học
for (var in numeric_vars) {
formula <- as.formula(paste(var, "~ class"))
anova_result <- aov(formula, data = data)
print(paste("ANOVA result for", var))
print(summary(anova_result))
cat("\n\n")
}
# Kiểm tra giá trị thiếu
colSums(is.na(data))
# Chuyển đổi các biến phân loại thành factor
data$gender <- as.factor(data$gender)
data$class <- as.factor(data$class)
# Kiểm tra lại cấu trúc sau khi chuyển đổi
str(data)
library(plotly)
bieu_do_class <- ggplot(data, aes(x = class)) +
geom_bar(aes(fill = class), color = "black", stat = "count") +
labs(title = "Bar Plot of Class Counts", x = "Class", y = "Frequency") +
theme_minimal()
ggplotly(bieu_do_class)
set.seed(123)
train_index <- sample(1:nrow(data), 0.7 * nrow(data))
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
library(nnet)  # Thư viện chứa hàm multinom()
data_md <- multinom(formula = class ~ age + weight_kg + height_cm + body_fat + diastolic + systolic + grip_force + sit_and_bend_forward_cm + sit_ups_counts + broad_jump_cm + gender,
data = train_data, maxit = 1500)
# Dự đoán trên tập kiểm tra
pred <- predict(data_md, newdata = test_data)
# Độ chính xác
accuracy <- mean(pred == test_data$class)
print(paste("Accuracy:", accuracy))
# Ma trận nhầm lẫn
conf_matrix <- table(Predicted = pred, Actual = test_data$class)
print(conf_matrix)
z_values <- summary(data_md)$coefficients / summary(data_md)$standard.errors
p_values <- (1 - pnorm(abs(z_values), 0, 1)) * 2
print(p_values)
library(nnet)
data_md <- multinom(
formula = class ~ age + weight_kg + grip_force +
sit_and_bend_forward_cm + sit_ups_counts + broad_jump_cm + gender,
data = train_data,
maxit = 1500
)
# Dự đoán trên tập kiểm tra
pred <- predict(data_md, newdata = test_data)
# Tính độ chính xác
accuracy <- mean(pred == test_data$class)
print(paste("Accuracy:", accuracy))
# Tạo ma trận nhầm lẫn
conf_matrix <- table(Predicted = pred, Actual = test_data$class)
# Kiểm tra xem conf_matrix có đúng định dạng không
if (!is.matrix(conf_matrix)) {
conf_matrix <- as.matrix(conf_matrix)
}
# In ma trận nhầm lẫn
print("Confusion Matrix:")
print(conf_matrix)
# Hàm đánh giá
eval_multi_class <- function(conf_matrix) {
cc <- sum(diag(conf_matrix)) # Số dự đoán đúng
sc <- sum(conf_matrix)       # Tổng số mẫu
pp <- colSums(conf_matrix) # Tổng dự đoán cho mỗi lớp
tt <- rowSums(conf_matrix) # Tổng thực tế cho mỗi lớp
precision <- diag(conf_matrix) / pp
recall <- diag(conf_matrix) / tt
f1_scores <- 2 * precision * recall / (precision + recall)
macro_precision <- mean(precision, na.rm = TRUE)
macro_recall <- mean(recall, na.rm = TRUE)
macro_f1 <- mean(f1_scores, na.rm = TRUE)
accuracy <- cc / sc
expected <- (pp * tt) / sc
kappa <- (cc - sum(expected)) / (sc - sum(expected))
return(list(
Precision = precision,
Recall = recall,
F1_Scores = f1_scores,
Macro_Precision = macro_precision,
Macro_Recall = macro_recall,
Macro_F1 = macro_f1,
Accuracy = accuracy,
Kappa = kappa
))
}
# Gọi hàm đánh giá
results <- eval_multi_class(conf_matrix)
# Hiển thị kết quả đánh giá
print("Evaluation Metrics:")
print(results)
library(ggplot2)
library(reshape2)
# Heatmap ma trận nhầm lẫn
conf_matrix <- melt(as.matrix(conf_matrix))
ggplot(conf_matrix, aes(x = Predicted, y = Actual, fill = value)) +
geom_tile() +
geom_text(aes(label = value), color = "white") +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
labs(title = "Confusion Matrix Heatmap", x = "Predicted", y = "Actual")
library(MASS)
data_md <- lda(formula = class ~ age + weight_kg + height_cm + body_fat +systolic + diastolic + grip_force + sit_and_bend_forward_cm + sit_ups_counts + broad_jump_cm + gender,
data = train_data, maxit = 1500)
data_md
# Dự đoán trên dữ liệu
predictions <- predict(data_md, newdata = test_data)
# Tạo ma trận nhầm lẫn
conf_matrix <- table(Predicted = predictions$class, Actual = test_data$class)
print(conf_matrix)
# Tính toán độ chính xác
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
cat("Accuracy:", accuracy, "\n")
data_md$scaling  # Các hệ số của từng biến độc lập trong các hàm phân biệt
data_md$svd
# Gọi hàm đánh giá
results <- eval_multi_class(conf_matrix)
# Hiển thị kết quả đánh giá
print("Evaluation Metrics:")
print(results)
library(ggplot2)
library(reshape2)
# Heatmap ma trận nhầm lẫn
conf_matrix <- melt(as.matrix(conf_matrix))
ggplot(conf_matrix, aes(x = Predicted, y = Actual, fill = value)) +
geom_tile() +
geom_text(aes(label = value), color = "white") +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
labs(title = "Confusion Matrix Heatmap", x = "Predicted", y = "Actual")
x <- train_data[, c("age", "weight_kg", "height_cm", "body_fat", "grip_force", "diastolic", "systolic",
"sit_and_bend_forward_cm", "sit_ups_counts",
"broad_jump_cm")]
x$gender <- as.numeric(factor(train_data$gender))  # Chuyển gender thành số (1 cho M, 0 cho F)
# Biến phụ thuộc (nhóm phân loại)
y <- train_data$class
# Thực hiện Box's M Test
library(biotools)
box_m_test <- boxM(as.matrix(x), grouping = y)
# In kết quả
print(box_m_test)
library(ggplot2)
library(reshape2)
# Danh sách các biến độc lập
numeric_vars <- c("age", "height_cm", "weight_kg", "body_fat", "diastolic",
"systolic", "grip_force", "sit_and_bend_forward_cm",
"sit_ups_counts", "broad_jump_cm")
# Chuyển đổi dữ liệu từ wide format sang long format để dễ dàng vẽ
data_long <- melt(data, id.vars = "class", measure.vars = numeric_vars)
# Vẽ phân phối cho tất cả các biến độc lập
ggplot(data_long, aes(x = value, fill = as.factor(class))) +
geom_histogram(position = "dodge", bins = 30) +
facet_wrap(~ variable, scales = "free") + # Tạo các biểu đồ con cho mỗi biến
labs(title = "Distribution of Independent Variables by Class", x = "Value", y = "Count") +
theme_minimal()
qda_model <- qda(class ~ age + weight_kg + height_cm + body_fat + diastolic + systolic + grip_force + sit_and_bend_forward_cm +
sit_ups_counts + broad_jump_cm + gender, data = train_data)
# Dự đoán trên tập kiểm tra
pred_qda <- predict(qda_model, newdata = test_data)$class
# Tạo ma trận nhầm lẫn
conf_matrix_qda <- table(Predicted = pred_qda, Actual = test_data$class)
print(conf_matrix_qda)
# Đánh giá mô hình
accuracy_qda <- mean(pred_qda == test_data$class)
cat("Accuracy:", accuracy_qda)
qda_model
qda_model <- qda(class ~ weight_kg + body_fat + grip_force + sit_and_bend_forward_cm +
sit_ups_counts + broad_jump_cm, data = train_data)
# Dự đoán trên tập kiểm tra
pred_qda <- predict(qda_model, newdata = test_data)$class
# Tạo ma trận nhầm lẫn
conf_matrix_qda <- table(Predicted = pred_qda, Actual = test_data$class)
print(conf_matrix_qda)
# Đánh giá mô hình
accuracy_qda <- mean(pred_qda == test_data$class)
cat("Accuracy:", accuracy_qda)
qda_model <- qda(class ~ age + weight_kg + body_fat + grip_force + sit_and_bend_forward_cm +
sit_ups_counts + broad_jump_cm + gender, data = train_data)
# Dự đoán trên tập kiểm tra
pred_qda <- predict(qda_model, newdata = test_data)$class
# Tạo ma trận nhầm lẫn
conf_matrix_qda <- table(Predicted = pred_qda, Actual = test_data$class)
print(conf_matrix_qda)
# Đánh giá mô hình
accuracy_qda <- mean(pred_qda == test_data$class)
cat("Accuracy:", accuracy_qda)
qda_model <- qda(class ~ age + weight_kg + grip_force + sit_and_bend_forward_cm +
sit_ups_counts + broad_jump_cm + gender, data = train_data)
# Dự đoán trên tập kiểm tra
pred_qda <- predict(qda_model, newdata = test_data)$class
# Tạo ma trận nhầm lẫn
conf_matrix_qda <- table(Predicted = pred_qda, Actual = test_data$class)
print(conf_matrix_qda)
# Đánh giá mô hình
accuracy_qda <- mean(pred_qda == test_data$class)
cat("Accuracy:", accuracy_qda)
# Gọi hàm đánh giá
results <- eval_multi_class(conf_matrix_qda)
# Hiển thị kết quả đánh giá
print("Evaluation Metrics:")
print(results)
library(ggplot2)
library(reshape2)
# Heatmap ma trận nhầm lẫn
conf_matrix <- melt(as.matrix(conf_matrix_qda))
ggplot(conf_matrix, aes(x = Predicted, y = Actual, fill = value)) +
geom_tile() +
geom_text(aes(label = value), color = "white") +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
labs(title = "Confusion Matrix Heatmap", x = "Predicted", y = "Actual")
library(randomForest)
# Xây dựng mô hình Random Forest với tất cả các biến
rf_model <- randomForest(class ~ ., data = train_data, ntree = 500, mtry = 3, importance = TRUE)
# In kết quả mô hình
print(rf_model)
# Dự đoán
rf_predictions <- predict(rf_model, newdata = test_data)
# Đánh giá mô hình
conf_matrix <- table(Predicted = rf_predictions, Actual = test_data$class)
print(conf_matrix)
# Tính độ chính xác
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
print(paste("Accuracy:", accuracy))
# Gọi hàm đánh giá
results <- eval_multi_class(conf_matrix)
# Hiển thị kết quả đánh giá
print("Evaluation Metrics:")
print(results)
importance(rf_model)
rf_model1 <- randomForest(class ~ age  + weight_kg + body_fat + grip_force + sit_and_bend_forward_cm + sit_ups_counts+ broad_jump_cm ,
data = train_data, ntree = 500, mtry = 3, importance = TRUE)
print(rf_model)
# Dự đoán
rf_predictions <- predict(rf_model, newdata = test_data)
# Đánh giá mô hình
conf_matrix <- table(Predicted = rf_predictions, Actual = test_data$class)
print(conf_matrix)
# Tính độ chính xác
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
print(paste("Accuracy:", accuracy))
# Gọi hàm đánh giá
results <- eval_multi_class(conf_matrix)
# Hiển thị kết quả đánh giá
print("Evaluation Metrics:")
print(results)
library(ggplot2)
library(reshape2)
# Heatmap ma trận nhầm lẫn
conf_matrix <- melt(as.matrix(conf_matrix_qda))
ggplot(conf_matrix, aes(x = Predicted, y = Actual, fill = value)) +
geom_tile() +
geom_text(aes(label = value), color = "white") +
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal() +
labs(title = "Confusion Matrix Heatmap", x = "Predicted", y = "Actual")
